// Copyright (c) 2014, LAAS-CNRS
// Authors: Joseph Mirabel (joseph.mirabel@laas.fr)
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
// DAMAGE.

#define BOOST_TEST_MODULE Parser
#include <pinocchio/fwd.hpp>
#include <boost/test/included/unit_test.hpp>

#include <pinocchio/algorithm/frames.hpp>
#include <pinocchio/algorithm/joint-configuration.hpp>
#include <pinocchio/algorithm/kinematics.hpp>
#include <pinocchio/multibody/model.hpp>
#include <hpp/util/debug.hh>
#include <hpp/pinocchio/gripper.hh>
#include <hpp/pinocchio/joint.hh>
#include <hpp/pinocchio/joint-collection.hh>
#include <hpp/pinocchio/urdf/util.hh>
#include "hpp/manipulation/device.hh"
#include "hpp/manipulation/parser/parser.hh"
#include "hpp/manipulation/srdf/factories.hh"
#include "hpp/manipulation/srdf/util.hh"

using namespace hpp::manipulation::srdf;
using namespace hpp::manipulation::parser;
using hpp::pinocchio::Transform3s;
using hpp::pinocchio::value_type;
using hpp::pinocchio::matrix3_t;
using hpp::pinocchio::vector3_t;
using hpp::pinocchio::vector_t;
using hpp::pinocchio::FrameIndex;

class Test {
  public:
    int i;
    double d;
    std::string name;
};

class TestDFactory : public SequenceFactory <double> {
  public:
    static ObjectFactory* create (ObjectFactory* parent = NULL, const XMLElement* element = NULL)
    {
      return new TestDFactory (parent, element);
    }

  protected:
    TestDFactory (ObjectFactory* parent, const XMLElement* element)
      : SequenceFactory <double> (parent, element, 1) {}
};

class TestFactory : public ObjectFactory {
  public:
    static ObjectFactory* create (ObjectFactory* parent = NULL, const XMLElement* element = NULL)
    {
      return new TestFactory (parent, element);
    }

    /// Called for each attribute
    virtual void impl_setAttribute (const XMLAttribute* attr)
    {
      if (strcmp (attr->Name (), "othername") == 0)
        obj_.name = attr->Value ();
    }

    virtual void finishTags () {
     ObjectFactory* o (NULL);
     if (!getChildOfType ("tag1", o)) {
       // There is more than one tag <position>
       // o is a pointer to the first one.
     }
     TestDFactory* sf = o->as <TestDFactory > ();
     obj_.d = sf->values ().front ();
    }

    Test* object ()
    {
      return &obj_;
    }

  protected:
    TestFactory (ObjectFactory* parent, const XMLElement* element) :
          ObjectFactory (parent, element) {}

  private:
    Test obj_;
};

BOOST_AUTO_TEST_CASE (testparser)
{
  Parser p (false);
  p.addObjectFactory ("test", TestFactory::create);
  p.addObjectFactory ("tag1", TestDFactory::create);
  p.parseString (
      "<?xml version=\"1.0\"?>                     \n"
      "<robot name=\"box\">                        \n"
      "  <test name=\"handle\">                    \n"
      "    <tag1>0</tag1>                          \n"
      "    <tag2 name=\"base_link\"/>              \n"
      "  </test>                                   \n"
      "  <test name=\"handle2\" othername=\"test\">\n"
      "    <tag1>0.54326 </tag1>                   \n"
      "    <tag2 name=\"test\"/>                   \n"
      "  </test>                                   \n"
      "</robot>                                    \n",
      hpp::manipulation::DevicePtr_t());

  BOOST_CHECK_EQUAL (p.objectFactories().size(), 7);

  BOOST_CHECK (p.objectFactories()[1]->as<TestFactory>());
  BOOST_CHECK (p.objectFactories()[2]->as<TestDFactory>());
  BOOST_CHECK (p.objectFactories()[4]->as<TestFactory>());
  BOOST_CHECK (p.objectFactories()[5]->as<TestDFactory>());

  BOOST_TEST_MESSAGE (p);
}

void checkPosition (const std::string xmlstring, const Transform3s& result)
{
  Parser p (false);
  p.addObjectFactory ("position", create <PositionFactory>);
  p.parseString (xmlstring.c_str(), hpp::manipulation::DevicePtr_t());
  BOOST_REQUIRE_EQUAL (p.objectFactories().size(), 1);

  ObjectFactory* objectFactory = p.objectFactories().front();
  BOOST_REQUIRE (objectFactory);
  PositionFactory* positionFactory = objectFactory->as<PositionFactory>();
  BOOST_REQUIRE (positionFactory);

  Transform3s M = positionFactory->position();
  BOOST_CHECK_MESSAGE (M.isApprox (result, 1e-5),
      "Different transforms:\n"
      << M << '\n'
      << result);
}

BOOST_AUTO_TEST_CASE (position)
{
  value_type w = 0.786066629137,
             x = 0.167518791246,
             y = 0.570941471358,
             z = 0.167518791246;
  Transform3s result (Eigen::Quaternion<value_type>(w, x, y, z).matrix(), vector3_t (0,1,0));

  std::ostringstream oss1,oss2;
  oss1 << w << ' ' << x << ' ' << y << ' ' << z;
  std::string wxyz = oss1.str();
  oss2 << x << ' ' << y << ' ' << z << ' ' << w;
  std::string xyzw = oss2.str();


  checkPosition ("<position>0 1 0 " + wxyz + "</position>", result);
  checkPosition ("<position xyz='0 1 0' wxyz='" + wxyz + "' />", result);
  checkPosition ("<position xyz='0 1 0' xyzw='" + xyzw + "' />", result);
  checkPosition ("<position xyz='0 1 0' rpy='1 1 1' />", result);

  checkPosition ("<position xyz='0 1 0' />", Transform3s (matrix3_t::Identity(), vector3_t (0,1,0)));
}

BOOST_AUTO_TEST_CASE (srdfparser)
{
  Parser p (false);
  p.addObjectFactory ("handle", create <HandleFactory>);
  p.addObjectFactory ("local_position", create <PositionFactory>);
  p.parseFile ("@CMAKE_SOURCE_DIR@/tests/ressources/box.srdf",
               hpp::manipulation::DevicePtr_t());

  std::cout << p;
}

BOOST_AUTO_TEST_CASE(append_model) {
  using hpp::pinocchio::GripperPtr_t;
  using hpp::pinocchio::urdf::loadModel;
  using hpp::pinocchio::urdf::loadModelFromString;
  using hpp::manipulation::DevicePtr_t;
  using hpp::manipulation::Device;

  DevicePtr_t robot = Device::create("test");
  FrameIndex baseFrame = 0;
  matrix3_t R;
  R << 0, -1, 0, 1, 0, 0, 0, 0, 1;
  vector3_t t;
  t << 1, 2, 3;
  ::pinocchio::SE3 wMr(R, t), Id;
  Id.setIdentity();
  std::string urdfPath(
      "package://example-robot-data/robots/ur_description/urdf/"
      "ur5_gripper.urdf");
  std::string srdfPath(
      "package://example-robot-data/robots/ur_description/srdf/"
      "ur5_gripper.srdf");
  std::string boxUrdf(
      "<robot name='box'>"
      "  <link name='base_link'>"
      "    <inertial>"
      "      <origin xyz='0.0 0.0 0.0' rpy='0 0 0' />"
      "      <mass value='0.6'/>"
      "      <inertia ixx='0.001' ixy='0.0' ixz='0.0'"
      "	       iyy='0.001' iyz='0.0'"
      "	       izz='0.001' />"
      "    </inertial>"
      "    <visual>"
      "      <origin xyz='0 0 0' rpy='0 0 0' />"
      "      <geometry>"
      "        <box size='0.03 0.05 0.05'/>"
      "      </geometry>"
      "      <material name='white'>"
      "        <color rgba='1 1 1 1'/>"
      "      </material>"
      "    </visual>"
      "    <collision>"
      "      <origin xyz='0 0 0' rpy='0 0 0' />"
      "      <geometry>"
      "        <box size='0.03 0.05 0.05'/>"
      "      </geometry>"
      "    </collision>"
      "  </link>"
      "</robot>");
  std::string boxSrdf(
      "<robot name='box'>"
      "</robot>");

  // Load first ur5
  loadModel(robot, baseFrame, "r0", "anchor", urdfPath, srdfPath, wMr);
  hpp::manipulation::srdf::loadModelFromFile(robot, "r0", srdfPath);
  // Load second ur5
  loadModel(robot, baseFrame, "r1", "anchor", urdfPath, srdfPath,
            ::pinocchio::SE3::Identity());
  hpp::manipulation::srdf::loadModelFromFile(robot, "r1", srdfPath);
  // append box
  loadModelFromString(robot, baseFrame, "box", "freeflyer", boxUrdf,
                      boxSrdf, Id);

  // Check kinematic chain
  BOOST_CHECK_EQUAL(robot->model().names[1], "r0/shoulder_pan_joint");
  BOOST_CHECK_EQUAL(robot->model().names[2], "r0/shoulder_lift_joint");
  BOOST_CHECK_EQUAL(robot->model().names[3], "r0/elbow_joint");
  BOOST_CHECK_EQUAL(robot->model().names[4], "r0/wrist_1_joint");
  BOOST_CHECK_EQUAL(robot->model().names[5], "r0/wrist_2_joint");
  BOOST_CHECK_EQUAL(robot->model().names[6], "r0/wrist_3_joint");
  BOOST_CHECK_EQUAL(robot->model().names[7], "r1/shoulder_pan_joint");
  BOOST_CHECK_EQUAL(robot->model().names[8], "r1/shoulder_lift_joint");
  BOOST_CHECK_EQUAL(robot->model().names[9], "r1/elbow_joint");
  BOOST_CHECK_EQUAL(robot->model().names[10], "r1/wrist_1_joint");
  BOOST_CHECK_EQUAL(robot->model().names[11], "r1/wrist_2_joint");
  BOOST_CHECK_EQUAL(robot->model().names[12], "r1/wrist_3_joint");
  BOOST_CHECK_EQUAL(robot->model().names[13], "box/root_joint");

  // Test that first robot is placed at the specified pose
  vector_t q(robot->model().nq);
  ::pinocchio::neutral(robot->model(), q);
  ::pinocchio::forwardKinematics(robot->model(), robot->data(), q);
  ::pinocchio::updateFramePlacements(robot->model(), robot->data());
  FrameIndex i(robot->model().getFrameId("r0/base_link"));
  BOOST_CHECK_EQUAL(robot->data().oMf[i], wMr);

  // Test that grippers are correctly defined
  GripperPtr_t gripper(robot->grippers.get("r0/gripper"));
  BOOST_CHECK_EQUAL(gripper->name(), "r0/gripper");
  BOOST_CHECK(gripper);
  Transform3s T(gripper->objectPositionInJoint());
  matrix3_t R1; R1 << 0, 1, 0,
                      1, 0, 0,
                      0, 0,-1;
  vector3_t t1; t1 << 0, 0.1373, 0;
  Transform3s Texp(R1, t1);
  std::cout << "T=" << T << std::endl;
  std::cout << "Texp=" << Texp << std::endl;
  BOOST_CHECK_SMALL(log6(Texp.inverse() * T).toVector().norm(), 1e-8);
  BOOST_CHECK_EQUAL(gripper->joint()->name(), "r0/wrist_3_joint");
  gripper = robot->grippers.get("r1/gripper");
  BOOST_CHECK(gripper);
  BOOST_CHECK_EQUAL(gripper->name(), "r1/gripper");
  T = gripper->objectPositionInJoint();
  std::cout << "T=" << T << std::endl;
  std::cout << "Texp=" << Texp << std::endl;
  BOOST_CHECK_SMALL(log6(Texp.inverse() * T).toVector().norm(), 1e-8);
  BOOST_CHECK_EQUAL(gripper->joint()->name(), "r1/wrist_3_joint");
  // Test structure of pinocchio model
  FrameIndex frameId = robot->model().getFrameId("r0/gripper");
  std::cout << "Frame id of \"r0/gripper\"=" << frameId << std::endl;
  const ::pinocchio::Frame& frame0 = robot->model().frames[frameId];
  std::cout << "Parent of \"r0/gripper\" is " << robot->model().names[frame0.parentJoint]
	    << std::endl;
  std::cout << "Pose of \"r0/gripper\" in parent joint = " << frame0.placement << std::endl;
  frameId = robot->model().getFrameId("r1/gripper");
  std::cout << "Frame id of \"r1/gripper\"=" << frameId << std::endl;
  const ::pinocchio::Frame& frame1 = robot->model().frames[frameId];
  std::cout << "Parent of \"r1/gripper\" is " << robot->model().names[frame1.parentJoint]
	    << std::endl;
  std::cout << "Pose of \"r1/gripper\" in parent joint = " << frame1.placement << std::endl;
}
