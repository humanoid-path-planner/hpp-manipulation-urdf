// Copyright (c) 2014, LAAS-CNRS
// Authors: Joseph Mirabel (joseph.mirabel@laas.fr)
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
// DAMAGE.

#define BOOST_TEST_MODULE Parser
#include <pinocchio/fwd.hpp>
#include <boost/test/included/unit_test.hpp>

#include <hpp/util/debug.hh>
#include "hpp/manipulation/parser/parser.hh"
#include "hpp/manipulation/srdf/factories.hh"

using namespace hpp::manipulation;
using namespace hpp::manipulation::srdf;
using namespace hpp::manipulation::parser;

class Test {
  public:
    int i;
    double d;
    std::string name;
};

class TestDFactory : public SequenceFactory <double> {
  public:
    static ObjectFactory* create (ObjectFactory* parent = NULL, const XMLElement* element = NULL)
    {
      return new TestDFactory (parent, element);
    }

  protected:
    TestDFactory (ObjectFactory* parent, const XMLElement* element)
      : SequenceFactory <double> (parent, element, 1) {}
};

class TestFactory : public ObjectFactory {
  public:
    static ObjectFactory* create (ObjectFactory* parent = NULL, const XMLElement* element = NULL)
    {
      return new TestFactory (parent, element);
    }

    /// Called for each attribute
    virtual void impl_setAttribute (const XMLAttribute* attr)
    {
      if (strcmp (attr->Name (), "othername") == 0)
        obj_.name = attr->ValueStr ();
    }

    virtual void finishTags () {
     ObjectFactory* o (NULL);
     if (!getChildOfType ("tag1", o)) {
       // There is more than one tag <position>
       // o is a pointer to the first one.
     }
     TestDFactory* sf = o->as <TestDFactory > ();
     obj_.d = sf->values ().front ();
    }

    Test* object ()
    {
      return &obj_;
    }

  protected:
    TestFactory (ObjectFactory* parent, const XMLElement* element) :
          ObjectFactory (parent, element) {}

  private:
    Test obj_;
};

BOOST_AUTO_TEST_CASE (testparser)
{
  Parser p (false);
  p.addObjectFactory ("test", TestFactory::create);
  p.addObjectFactory ("tag1", TestDFactory::create);
  p.parseString (
      "<?xml version=\"1.0\"?>                     \n"
      "<robot name=\"box\">                        \n"
      "  <test name=\"handle\">                    \n"
      "    <tag1>0</tag1>                          \n"
      "    <tag2 name=\"base_link\"/>              \n"
      "  </test>                                   \n"
      "  <test name=\"handle2\" othername=\"test\">\n"
      "    <tag1>0.54326 </tag1>                   \n"
      "    <tag2 name=\"test\"/>                   \n"
      "  </test>                                   \n"
      "</robot>                                    \n",
      DevicePtr_t());

  BOOST_CHECK_EQUAL (p.objectFactories().size(), 7);

  BOOST_CHECK (p.objectFactories()[1]->as<TestFactory>());
  BOOST_CHECK (p.objectFactories()[2]->as<TestDFactory>());
  BOOST_CHECK (p.objectFactories()[4]->as<TestFactory>());
  BOOST_CHECK (p.objectFactories()[5]->as<TestDFactory>());

  BOOST_TEST_MESSAGE (p);
}

void checkPosition (const std::string xmlstring, const Transform3f& result)
{
  Parser p (false);
  p.addObjectFactory ("position", create <PositionFactory>);
  p.parseString (xmlstring.c_str(), DevicePtr_t());
  BOOST_REQUIRE_EQUAL (p.objectFactories().size(), 1);

  ObjectFactory* objectFactory = p.objectFactories().front();
  BOOST_REQUIRE (objectFactory);
  PositionFactory* positionFactory = objectFactory->as<PositionFactory>();
  BOOST_REQUIRE (positionFactory);

  Transform3f M = positionFactory->position();
  BOOST_CHECK_MESSAGE (M.isApprox (result, 1e-5),
      "Different transforms:\n"
      << M << '\n'
      << result);
}

BOOST_AUTO_TEST_CASE (position)
{
  value_type w = 0.786066629137,
             x = 0.167518791246,
             y = 0.570941471358,
             z = 0.167518791246;
  Transform3f result (Eigen::Quaternion<value_type>(w, x, y, z).matrix(), vector3_t (0,1,0));

  std::ostringstream oss1,oss2;
  oss1 << w << ' ' << x << ' ' << y << ' ' << z;
  std::string wxyz = oss1.str();
  oss2 << x << ' ' << y << ' ' << z << ' ' << w;
  std::string xyzw = oss2.str();


  checkPosition ("<position>0 1 0 " + wxyz + "</position>", result);
  checkPosition ("<position xyz='0 1 0' wxyz='" + wxyz + "' />", result);
  checkPosition ("<position xyz='0 1 0' xyzw='" + xyzw + "' />", result);
  checkPosition ("<position xyz='0 1 0' rpy='1 1 1' />", result);

  checkPosition ("<position xyz='0 1 0' />", Transform3f (matrix3_t::Identity(), vector3_t (0,1,0)));
}

BOOST_AUTO_TEST_CASE (srdfparser)
{
  Parser p (false);
  p.addObjectFactory ("handle", create <HandleFactory>);
  p.addObjectFactory ("local_position", create <PositionFactory>);
  p.parseFile ("@CMAKE_SOURCE_DIR@/tests/ressources/box.srdf", hpp::manipulation::DevicePtr_t());

  std::cout << p;
}
